<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kunjava.mapper.IUserMapper">
    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="com.kunjava.domain.User">
        <id column="id" property="userId" jdbcType="INTEGER"></id>
        <result column="username" property="userName" jdbcType="VARCHAR"></result>
        <result column="sex" property="userSex" jdbcType="VARCHAR"></result>
        <result column="birthday" property="userBirthday" jdbcType="VARCHAR"></result>
        <result column="address" property="userAddress" jdbcType="VARCHAR"></result>
    </resultMap>
    <!-- 查询所有 -->
    <select id="findAll" resultMap="userMap">
        select * from user;
    </select>
    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="user">
        <!-- 配置插入操作后，获取插入数据的id -->
        <selectKey keyProperty="userId" keyColumn="id" resultType="Integer" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{userName},#{userAddress},#{userSex},#{userBirthday});
    </insert>
    <!-- 更新用户 -->
    <update id="updateUser" parameterType="User">
        update user
        <set>
            <if test="userName != null">username = #{userName,jdbcType=VARCHAR}</if>
            <if test="userAddress != null">address = #{userAddress,jdbcType=VARCHAR}</if>
            <if test="userSex != null">sex = #{userSex,jdbcType=VARCHAR}</if>
            <if test="userBirthday != null">birthday = #{userBirthday,jdbcType=DATE}</if>
        </set>
        where id = #{userId,jdbcType=INTEGER}
    </update>
    <!-- 删除用户-->
    <delete id="deleteUser" parameterType="Integer">
        delete from user where id = #{userId}
    </delete>
    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="Integer" resultMap="userMap">
        select * from user where id = #{userId}
    </select>
    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="String" resultMap="userMap">
          select * from user where username like #{userName}
        <!-- select * from user where username like '%${value}%'-->
   </select>
    <!-- 获取用户的总记录条数 -->
    <select id="findTotal" resultType="Integer">
        select count(id) from user;
    </select>
</mapper>